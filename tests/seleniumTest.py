# Generated by Selenium IDE
import pytest
import time
import json
import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestScoring(unittest.TestCase):
    ''' This is a class containing testcase related to scoring page '''

    # a class method called before any test in an individual class have run.
    @classmethod
    def setUpClass(cls):
        cls.driver = webdriver.Chrome()
        cls.vars = {}

    # a class method called after any test in an individual class have run.
    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()

    def test_we_score(self):
        # Open test page
        self.driver.get(
            "http://localhost:8080/home/-N3hlhMMtjy-u_QrqVL8/team/-NTd4gODlBQPL9Na1VYr/scoring/-NW1TCL0Frg3amRA_EYl"
        )

        # wait for member element to be visible
        WebDriverWait(self.driver, 3).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".team-member:nth-child(1)")))

        # get current scoring number after loading
        beforeScore = self.driver.find_element(By.CSS_SELECTOR, ".justify-content-center:nth-child(3)").text

        # select a member
        selectedMemberButton = self.driver.find_element(By.CSS_SELECTOR, ".team-member:nth-child(1)").click()
        selectedMemberNum = self.driver.find_element(By.XPATH, '//*[@id="record-tab-pane"]/div/div[1]/div[2]/div[1]/button[1]/span[1]').text
        selectedMemberName = self.driver.find_element(By.XPATH, '//*[@id="record-tab-pane"]/div/div[1]/div[2]/div[1]/button[1]/span[2]').text

        # wait for scoring button to be visible
        WebDriverWait(self.driver, 3).until(
            expected_conditions.visibility_of_element_located(
                (By.CSS_SELECTOR, ".d-grid > .d-grid:nth-child(1) > .btn-outline-secondary:nth-child(1)")))
        # click on a scoring button
        scoringType = self.driver.find_element(
            By.CSS_SELECTOR, ".d-grid > .d-grid:nth-child(1) > .btn-outline-secondary:nth-child(1)")
        scoringTypeName = scoringType.text
        scoringType.click()

        # wait for scoring button to be visible
        WebDriverWait(self.driver, 3).until(
            expected_conditions.visibility_of_element_located(
                (By.CSS_SELECTOR, ".d-grid:nth-child(2) > .btn")))
        # click `send`
        self.driver.find_element(By.CSS_SELECTOR, ".d-grid:nth-child(2) span:nth-child(1)").click()

        # switch to history tab
        self.driver.find_element(By.ID, "history-tab").click()
        # wait for history tab to appear
        WebDriverWait(self.driver, 3).until(
            expected_conditions.presence_of_element_located(
                # (By.XPATH, "/html/body/div[4]/div/div[2]/div/div[3]/div/div[2]/div[2]/table")))
                (By.ID, "history-tab-pane")))

        # get first row elements from history table
        firstRowNum = self.driver.find_element(By.XPATH, '//*[@id="history-tab-pane"]/div[2]/table/tbody/tr[1]/td[1]/div/span[1]').get_attribute('innerHTML').strip()
        firstRowName = self.driver.find_element(By.XPATH, '//*[@id="history-tab-pane"]/div[2]/table/tbody/tr[1]/td[1]/div/span[2]').get_attribute('innerHTML').strip()
        firstRowScoringName = self.driver.find_element(By.XPATH, '//*[@id="history-tab-pane"]/div[2]/table/tbody/tr[1]/td[2]').get_attribute('innerHTML').strip()

        afterScore = self.driver.find_element(By.CSS_SELECTOR, ".justify-content-center:nth-child(3)").text

        # check member name, member number and scoring number is correct
        self.assertEqual(selectedMemberNum, firstRowNum)
        self.assertEqual(selectedMemberName, firstRowName)
        self.assertEqual(scoringTypeName, firstRowScoringName)
        self.assertEqual(int(beforeScore) + 1, int(afterScore),
                         f'beforeScore{beforeScore} + 1 is not equal to afterScore{afterScore}')
